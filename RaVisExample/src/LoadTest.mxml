<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="100%" height="100%" 
			   xmlns:visual="org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.*"
			   creationComplete="initData()" >
	<fx:Declarations>
		<fx:XML id="xmldata" source="data/graph.xml" />
	</fx:Declarations>
	
	<visual:EnhancedVisualGraph id="vgraph" width="100%" height="100%" 
								left="0" right="0" top="0" bottom="5"
								backgroundColor="#FFFFFF" alpha="1"
								enableDefaultDoubleClick="false"
								visibilityLimitActive="true"
								>
	</visual:EnhancedVisualGraph>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			
			import org.un.cava.birdeye.ravis.assets.icons.EmbeddedIcons;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.data.EnhancedGraph;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.event.VGEdgeEvent;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.event.VGNodeEvent;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.EdgeControlRenderer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.EdgeDrawer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.EdgeRenderer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.nodeRenderers.EnhancedIconNodeRenderer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.nodeRenderers.NodeLabelRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.data.INode;
			import org.un.cava.birdeye.ravis.graphLayout.layout.HierarchicalLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.utils.TypeUtil;
			
			/* 
			* The following local variables hold various
			* important object references
			*/
			
			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			/**
			 * event handler for HTTPService, does all the remaining required
			 * initialisation
			 * */
			private function initData():void {
				var defaultNodeDistanceTop:Number = 120;
				var defaultNodeDistanceLeft:Number = 30;								
				/* set the graph in the VGraph object, this automatically
				* initializes the VGraph items */
				//graph = new EnhancedGraph("XMLAsDocsGraph",true, xmldata);
				
				graph = new EnhancedGraph("XMLAsDocsGraph",true);
				var vo:Object = TypeUtil.deserializeXMLString(xmldata);
				EnhancedGraph(graph).initFromVO(vo); 
				
				vgraph.graph = graph;
				/* set the default layouter type */
				layouter = new HierarchicalLayouter(vgraph);
				HierarchicalLayouter(layouter).orientation = HierarchicalLayouter.ORIENT_TOP_DOWN;
				vgraph.layouter = layouter;
				
				// 是否同一水平等级扩展
				HierarchicalLayouter(layouter).enableSiblingSpread = false;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				vgraph.edgeRendererFactory = new ClassFactory(EdgeDrawer);
				//vgraph.edgeRenderer = new EdgeDrawer(vgraph.edgeDrawGraphics);
				vgraph.nodeLabelRenderer = new ClassFactory(NodeLabelRenderer);
				vgraph.edgeControlRenderer = new ClassFactory(EdgeControlRenderer);
				vgraph.itemRenderer = new ClassFactory(EnhancedIconNodeRenderer);
				vgraph.edgeLabelRenderer = new ClassFactory(EdgeRenderer);
				
				/* set the visibility limit options, default 2 */
				vgraph.maxVisibleDistance = 20;
				
				/* select a root node, most layouters requires a root node */
				startRoot = graph.nodeByStringId("1").vnode;
				
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;
				vgraph.displayNodeLabels = true;
				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;
				
				addEventListeners();
				initDone = true;
				vgraph.draw();
			}
			
			private function addEventListeners():void
			{
				//vgraph.addEventListener(VGNodeEvent.VG_NODE_CLICK, nodeEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_DOUBLE_CLICK, nodeEventHandler);
				/* vgraph.addEventListener(VGNodeEvent.VG_NODE_MOUSE_DOWN, nodeEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_MOUSE_UP, nodeEventHandler); */
				
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_CLICK, edgeEventHandler);
				//vgraph.addEventListener(VGEdgeEvent.VG_EDGE_DOUBLE_CLICK, edgeEventHandler);
				/* vgraph.addEventListener(VGEdgeEvent.VG_EDGE_MOUSE_DOWN, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_MOUSE_UP, edgeEventHandler); */
				
				/* vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_CLICK, nodeLabelEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_DOUBLE_CLICK, nodeLabelEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_MOUSE_DOWN, nodeLabelEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_MOUSE_UP, nodeLabelEventHandler); */
				
				/* vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_CLICK, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_DOUBLE_CLICK, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_MOUSE_DOWN, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_MOUSE_UP, edgeEventHandler); */
			}
			
			private function edgeEventHandler(event:VGEdgeEvent):void
			{
				var dataInfo:String
				if (event.edge.data is XML)
					dataInfo = event.edge.data.toXMLString();
				else
					dataInfo = ObjectUtil.toString(event.edge.data);
				Alert.show("EDGE EVENT: " + event.type + ", data = " + dataInfo)
			}
			
			private function nodeEventHandler(event:VGNodeEvent):void
			{
				if (vgraph.enableDefaultDoubleClick == false)
				{
					var node:INode = event.node;
					vgraph.setVisibleNodeWithRelated(node.vnode);
				}
			}
			
			private function edgeLabelEventHandler(event:VGEdgeEvent):void
			{
				trace("EDGE EVENT: " + event.type);
			}
			
			private function nodeLabelEventHandler(event:VGNodeEvent):void
			{
				trace("NODE EVENT: " + event.type);	
			}
		]]>
	</fx:Script>
</s:Application>
